# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Query {
  findCatsAuth: [Cat!]
  findCats: [Cat!]
  findCat(id: String!): Cat

  # Find all Cats in the database
  findEntries: [Entry!]

  # Find an entry by id
  findEntry(id: String!): Entry

  # Return the greeting "hello"
  hello: String!
  login(loginInput: LoginInput!): AccessToken
  getUser(username: String!): JSONObject
  listUsers(paginationToken: String, limit: Float): JSONObject
  listGroups(paginationToken: String, limit: Float): JSONObject
  listGroupsForUser(nextToken: String, limit: Float, username: String!): JSONObject
  listUsersInGroup(nextToken: String, limit: Float, groupname: String!): JSONObject
  findGlossaryItems(options: FindAllArgsInput): [GlossaryItem!]
  findGlossaryItem(id: String!): GlossaryItem
}

# Cat Object
type Cat {
  # String of MongoDB ObjectId
  id: ID!

  # Name of the Cat
  name: String!

  # Age of the Cat
  age: Float!

  # Breed of the Cat
  breed: String!
}

# Single Entry
type Entry {
  # String of MongoDB ObjectId
  id: ID!

  # Reel of the Entry
  Reel: Int!

  # Store Owner
  Owner: String!

  # Name of Store
  Store: String!

  # Year the entry was made
  Year: [Int!]!

  # Folio the entry is contained in
  FolioPage: Int!

  # ID of entry within Folio
  EntryID: String!

  # Prefix of account holder's name
  Prefix: String!

  # First name of account holder
  AccountFirstName: String!

  # Last name of account holder
  AccountLastName: String!

  # Suffix of account holder
  Suffix: String!

  # Profession of account holder
  Profession: String!

  # Location?
  Location: String!

  # Reference?
  Reference: String!

  # Debt or Credit transaction
  DrCr: String!

  # Date of entry
  Date: DateObject!
  ItemEntry: [ItemEntry!]
  TobaccoEntry: TobaccoEntryObject

  # People referenced in this entry
  People: [String!]!

  # Places referenced in this entry
  Places: [String!]!

  # Reference to another Folio page
  FolioReference: Int!

  # Type of Entry
  EntryType: Int!

  # Ledger containing this Entry
  Ledger: String!

  # Quantity of commodity purchased
  Quantity: Int!

  # Commodity being purchased
  Commodity: String!

  # Sterling pounds used in transaction
  L1: Int!

  # Sterling shillings used in transaction
  S1: Int!

  # Sterling pence used in transaction
  D1: Int!

  # Type of Colonial currency
  Colony: String!

  # Colonial pounds used in transaction
  L2: Int!

  # Colonial shillings used in transaction
  S2: Int!

  # Colonial pence used in transaction
  D2: Int!

  # Indicates if item would survive till today
  ArchMat: Int!

  # Indicates if someone or someplace is mentioned in the entry
  GenMat: Int!

  # comments on the entry
  Final: String!
}

# Single Date
type DateObject {
  # day of date
  day: Int!

  # month of date
  month: Int!

  # year of date
  year: Int!

  # complete date
  date: DateTime!
}

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar DateTime

type ItemEntry {
  # Quantity of item
  ItemQuantity: Float!

  # Item descriptors
  Qualifier: String!

  # Item name
  Item: String!

  # Price per unit
  UnitPrice: String!

  #
  TransactionCost: String!

  # Money used in transaction
  Money: MoneyObject!
}

type MoneyObject {
  # Number of pounds
  L: Float!

  # Number of shillings
  S: Float!

  # Number of Pence
  D: Float!
}

type TobaccoEntryObject {
  # words
  Entry: String!

  # Signifies which person is represented in the exchange
  Mark: String!

  #
  Notes: [NoteObject!]!

  #
  Money: [TobaccoRateObject!]!
}

type NoteObject {
  #
  NoteNum: Float!

  #
  TotalWeight: Float!

  #
  BarrelWeight: Float!

  #
  TobaccoWeight: Float!
}

type TobaccoRateObject {
  #
  MoneyType: String!

  #
  TobaccoAmount: Float!

  #
  RateForTobacco: MoneyObject!

  #
  CaskInTransaction: Float!

  #
  CasksSoldFor: MoneyObject!
}

type AccessToken {
  accessToken: String!
}

input LoginInput {
  username: String!
  password: String!
}

# The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

# Glossary Item Object
type GlossaryItem {
  # String of MongoDB _id
  id: ID!

  # Name of glossary item
  name: String!

  # Filename of image in S3 bucket
  imageKey: String!

  # Description of item
  description: String!

  # Category item is in
  category: String!

  # Sub-category item is in
  subCategory: String!

  # Original price of item
  originalPrice: Float!

  # Other items related to this one
  relatedItems: [String!]!

  # Purchases related to this item
  relatedPurchases: [String!]!
}

input FindAllArgsInput {
  # Offset of items to skip
  skip: Float = 0

  # number of items to return, number must be in the range 1 <= limit <= 50
  limit: Float = 10
}

type Mutation {
  createCat(newCat: CreateCatDto!): Cat!
  createEntry(createEntryInput: CreateEntryInput!): Entry!
  register(registerInput: RegisterInput!): String
  signUserOut(username: String!): JSONObject
  confirmUserSignUp(username: String!): JSONObject
  disableUser(username: String!): JSONObject
  enableUser(username: String!): JSONObject
  addUserToGroup(groupname: String!, username: String!): JSONObject
  removeUserFromGroup(groupname: String!, username: String!): JSONObject
  importSpreadsheet(spreadsheetObj: JSONObject!): [JSONObject!]
  createGlossaryItem(newGlossaryItem: CreateGlossaryItemInput!): GlossaryItem!
  updateGlossaryItem(updatedFields: UpdateGlossaryItemInput!, id: String!): GlossaryItem
  deleteGlossaryItem(id: String!): GlossaryItem
}

input CreateCatDto {
  name: String!
  age: Float!
  breed: String!
}

input CreateEntryInput {
  Reel: Int!

  # Store Owner
  Owner: String!

  # Name of Store
  Store: String!

  # Year the entry was made
  Year: [Int!]!

  # Folio the entry is contained in
  FolioPage: Int!

  # ID of entry within Folio
  EntryID: String!

  # Prefix of account holder's name
  Prefix: String!

  # First name of account holder
  AccountFirstName: String!

  # Last name of account holder
  AccountLastName: String!

  # Suffix of account holder
  Suffix: String!

  # Profession of account holder
  Profession: String!

  # Location?
  Location: String!

  # Reference?
  Reference: String!

  # Debt or Credit transaction
  DrCr: String!

  # Date of entry
  Date: InputDate!
  ItemEntry: [InputItem!]
  TobaccoEntry: InputTobaccoEntry

  # People referenced in this entry
  People: [String!]!

  # Places referenced in this entry
  Places: [String!]!

  # Reference to another Folio page
  FolioReference: Int!

  # Type of Entry
  EntryType: Int!

  # Ledger containing this Entry
  Ledger: String!

  # Quantity of commodity purchased
  Quantity: Int!

  # Commodity being purchased
  Commodity: String!

  # Sterling pounds used in transaction
  L1: Int!

  # Sterling shillings used in transaction
  S1: Int!

  # Sterling pence used in transaction
  D1: Int!

  # Type of Colonial currency
  Colony: String!

  # Colonial pounds used in transaction
  L2: Int!

  # Colonial shillings used in transaction
  S2: Int!

  # Colonial pence used in transaction
  D2: Int!

  # Indicates if item would survive till today
  ArchMat: Int!

  # Indicates if someone or someplace is mentioned in the entry
  GenMat: Int!

  # comments on the entry
  Final: String!
}

input InputDate {
  # day of date
  day: Int!

  # month of date
  month: Int!

  # year of date
  year: Int!

  # complete date
  date: DateTime!
}

input InputItem {
  # Quantity of item
  ItemQuantity: Float!

  # Item descriptors
  Qualifier: String!

  # Item name
  Item: String!

  # Price per unit
  UnitPrice: String!

  #
  TransactionCost: String!

  # Money used in transaction
  Money: InputMoney!
}

input InputMoney {
  # Number of pounds
  L: Float!

  # Number of shillings
  S: Float!

  # Number of Pence
  D: Float!
}

input InputTobaccoEntry {
  # words
  Entry: String!

  # Signifies which person is represented in the exchange
  Mark: String!

  #
  Notes: [InputNote!]!

  #
  Money: [InputTobaccoRate!]!
}

input InputNote {
  #
  NoteNum: Float!

  #
  TotalWeight: Float!

  #
  BarrelWeight: Float!

  #
  TobaccoWeight: Float!
}

input InputTobaccoRate {
  #
  MoneyType: String!

  #
  TobaccoAmount: Float!

  #
  RateForTobacco: InputMoney!

  #
  CaskInTransaction: Float!

  #
  CasksSoldFor: InputMoney!
}

input RegisterInput {
  email: String!
  name: String!
  password: String!
  given_name: String!
  family_name: String!
}

input CreateGlossaryItemInput {
  # Name of glossary item
  name: String!

  # Filename of image in S3 bucket
  imageKey: String!

  # Description of item
  description: String!

  # Category item is in
  category: String!

  # Sub-category item is in
  subCategory: String!

  # Original price of item
  originalPrice: Float!

  # Other items related to this one
  relatedItems: [String!]!

  # Purchases related to this item
  relatedPurchases: [String!]!
}

input UpdateGlossaryItemInput {
  # Name of glossary item
  name: String

  # Filename of image in S3 bucket
  imageKey: String

  # Description of item
  description: String

  # Category item is in
  category: String

  # Sub-category item is in
  subCategory: String

  # Original price of item
  originalPrice: Float

  # Other items related to this one
  relatedItems: [String!]

  # Purchases related to this item
  relatedPurchases: [String!]
}
