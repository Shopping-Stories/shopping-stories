# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Query {
  findCatsAuth: [Cat!]
  findCats: [Cat!]
  findCat(id: String!): Cat

  # Find all Cats in the database
  findEntries: [Entry!]

  # Find an entry by id
  findEntry(id: String!): Entry

  # Return the greeting "hello"
  hello: String!
  login(loginInput: LoginInput!): AccessToken
  getUser(username: String!): JSONObject
  listUsers(paginationToken: String, limit: Float): JSONObject
  listGroups(paginationToken: String, limit: Float): JSONObject
  listGroupsForUser(nextToken: String, limit: Float, username: String!): JSONObject
  listUsersInGroup(nextToken: String, limit: Float, groupname: String!): JSONObject
  findGlossaryItems(options: FindAllLimitAndSkip): [GlossaryItem!]
  countGlossaryItems: Float!
  findGlossaryItem(id: String!): GlossaryItem
  findItems(options: FindAllLimitAndSkip): [Item!]
  countItems: Float!
  findOneItem(id: String!): Item
  findPlaces(options: FindAllLimitAndSkip): [Place!]
  countPlaces: Float!
  findOnePlace(id: String!): Place
  findPeople(options: FindAllLimitAndSkip): [Person!]
  countPeople: Float!
  findOnePerson(id: String!): Person
  findTobaccoMarks(options: FindAllLimitAndSkip): [TobaccoMark!]
  countTobaccoMarks: Float!
  findOneTobaccoMark(id: String!): TobaccoMark
  findCategories(options: FindAllLimitAndSkip): [Category!]
  countCategories: Float!
  findOneCategory(id: String!): Category
}

# Cat Object
type Cat {
  # String of MongoDB ObjectId
  id: ID!

  # Name of the Cat
  name: String!

  # Age of the Cat
  age: Float!

  # Breed of the Cat
  breed: String!
}

# Single Entry
type Entry {
  # String of MongoDB ObjectId
  id: ID!

  # Information on the account holder in the transaction
  accountHolder: AccHolderObject!

  # Meta information of the entry
  meta: MetaObject!

  # Date of entry
  dateInfo: DateObject!

  #
  folioRefs: [String!]!

  #
  ledgerRefs: [String!]!
  itemEntries: [ItemEntryObject!]
  tobaccoEntry: TobaccoEntryObject
  regularEntry: RegularEntryObject

  # People referenced in this entry
  people: [PeoplePlacesObject!]!

  # Places referenced in this entry
  places: [PeoplePlacesObject!]!

  # Type of Entry
  entry: String!

  # general money information for the entry
  money: MoneyObject!
}

#
type AccHolderObject {
  # Prefix of account holder's name
  prefix: String!

  # First name of account holder
  accountFirstName: String!

  # Last name of account holder
  accountLastName: String!

  # Suffix of account holder
  suffix: String!

  # Profession of account holder
  profession: String!

  # Location?
  location: String!

  # Reference?
  reference: String!

  # Debt or Credit transaction
  debitOrCredit: Float!

  # ID of the accountholder to reference in peoples master list
  accountHolderID: ID!
}

type MetaObject {
  # Ledger containing this Entry
  ledger: String!

  # Reel of the Entry
  reel: String!

  # Store Owner
  owner: String!

  # Name of Store
  store: String!

  # Year the entry was made
  year: String!

  # Folio the entry is contained in
  folioPage: String!

  # ID of entry within Folio
  entryID: String!

  # comments
  comments: String!
}

# Single Date
type DateObject {
  # day of date
  day: Int!

  # month of date
  month: Int!

  # year of date
  year: String!

  # complete date
  fullDate: DateTime
}

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar DateTime

type ItemEntryObject {
  #
  perOrder: Float!

  #
  percentage: Float!

  #
  itemsOrServices: [ItemsOrServicesObject]!

  #
  itemsMentioned: [MentionedItemsObject!]!
}

type ItemsOrServicesObject {
  #
  quantity: Float!

  #
  qualifier: String!

  #
  variants: [String!]!

  #
  item: String!

  #
  category: String

  #
  subcategory: String

  #
  unitCost: PoundsShillingsPence!

  #
  itemCost: PoundsShillingsPence!
}

type PoundsShillingsPence {
  # Number of pounds
  pounds: Float

  # Number of shillings
  shilling: Float

  # Number of Pence
  pence: Float
}

type MentionedItemsObject {
  #
  quantity: Float!

  #
  qualifier: String!

  #
  item: String!
}

type TobaccoEntryObject {
  # words
  entry: String!

  #
  marks: [TobaccoMarkObject!]!

  #
  notes: [NoteObject!]!

  #
  money: [TobaccoMoneyObject!]!

  # words
  tobaccoShaved: Float!
}

type TobaccoMarkObject {
  # words
  markID: ID!

  #
  markName: String!
}

type NoteObject {
  #
  noteNum: Float!

  #
  totalWeight: Float!

  #
  barrelWeight: Float!

  #
  tobaccoWeight: Float!
}

type TobaccoMoneyObject {
  # words
  moneyType: String!

  # words
  tobaccoAmount: Float!

  # words
  rateForTobacco: PoundsShillingsPence!

  # words
  casksInTransaction: Float!

  # words
  tobaccoSold: PoundsShillingsPence!

  # words
  casksSoldForEach: PoundsShillingsPence!
}

type RegularEntryObject {
  # words
  entry: String!

  #
  tobaccoMarks: [TobaccoMarkObject!]!

  #
  itemsMentioned: [MentionedItemsObject!]!
}

type PeoplePlacesObject {
  # Persons name
  name: String!

  # words
  id: ID
}

type MoneyObject {
  #
  quantity: String

  #
  commodity: String!

  #
  colony: String

  #
  sterling: PoundsShillingsPence!

  #
  currency: PoundsShillingsPence!
}

type AccessToken {
  accessToken: String!
}

input LoginInput {
  username: String!
  password: String!
}

# The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

# Glossary Item Object
type GlossaryItem {
  # String of MongoDB _id
  id: ID!

  # Name of glossary item
  name: String!

  # Filename of image in S3 bucket
  imageKey: String!

  # Description of item
  description: String!

  # Category item is in
  category: String!

  # Sub-category item is in
  subCategory: String!

  # Original price of item
  originalPrice: Float!

  # Other items related to this one
  relatedItems: [String!]!

  # Purchases related to this item
  relatedPurchases: [String!]!
}

input FindAllLimitAndSkip {
  # Offset of items to skip
  skip: Float = 0

  # number of items to return, number must be in the range 1 <= limit <= 50
  limit: Float = 10
}

# Item Object
type Item {
  # String of MongoDB ObjectId
  id: ID!

  # Type of item
  item: String!

  # Variations of given item
  variants: String!
}

# Place Object
type Place {
  # String of MongoDB ObjectId
  id: ID!

  # Type of item
  location: String!

  # Variations of given item
  alias: String!

  # Variations of given item
  descriptor: String!
}

# People Object
type Person {
  # String of MongoDB ObjectId
  id: ID!

  # Variations of given item
  account: String!

  # Variations of given item
  enslaved: String

  # Variations of given item
  firstName: String

  # Variations of given item
  lastName: String

  # Variations of given item
  gender: String

  # Variations of given item
  location: String

  # Variations of given item
  prefix: String

  # Variations of given item
  profession: String

  # Variations of given item
  professionCategory: String
  professionQualifier: String

  # Variations of given item
  reference: String

  # Variations of given item
  store: String!

  # Variations of given item
  suffix: String

  # Variations of given item
  variations: String
}

# TobaccoMark Object
type TobaccoMark {
  # String of MongoDB ObjectId
  id: ID!

  # Variations of given item
  description: String!

  # TODO: Fill this in
  image: String!

  # TODO: Fill this in
  netWeight: String!

  # TODO: Fill this in
  note: String!

  # TODO: Fill this in
  notes: String!

  # TODO: Fill this in
  tobaccoMarkId: String!

  # TODO: Fill this in
  warehouse: String!

  # TODO: Fill this in
  where: String!

  # TODO: Fill this in
  whoRepresents: String!

  # TODO: Fill this in
  whoUnder: String!
}

# Category Object
type Category {
  # String of MongoDB ObjectId
  id: ID!

  # Category type
  category: String!

  # Items in the category
  item: String!

  # Subcategory?
  subcategory: String!
}

type Mutation {
  createCat(newCat: CreateCatDto!): Cat!
  createEntry(createEntryInput: CreateEntryInput!): Entry!
  createEntries(entries: [CreateEntryInput]!): [Entry!]!
  register(registerInput: RegisterInput!): String
  signUserOut(username: String!): JSONObject
  confirmUserSignUp(username: String!): JSONObject
  disableUser(username: String!): JSONObject
  enableUser(username: String!): JSONObject
  addUserToGroup(groupname: String!, username: String!): JSONObject
  removeUserFromGroup(groupname: String!, username: String!): JSONObject
  importSpreadsheet(spreadsheetObj: JSONObject!): [JSONObject!]
  createGlossaryItem(newGlossaryItem: CreateGlossaryItemInput!): GlossaryItem!
  updateGlossaryItem(updatedFields: UpdateGlossaryItemInput!, id: String!): GlossaryItem
  deleteGlossaryItem(id: String!): GlossaryItem
  createItem(item: CreateItemInput!): Item!
  updateItem(updatedFields: UpdateItemInput!, id: String!): Item
  deleteItem(id: String!): Item
  createPlace(place: CreatePlaceInput!): Place!
  updatePlace(updatedFields: UpdatePlaceInput!, id: String!): Place
  deletePlace(id: String!): Place
  createPerson(person: CreatePersonInput!): Person!
  updatePerson(updatedFields: UpdatePersonInput!, id: String!): Person
  deletePerson(id: String!): Person
  createTobaccoMark(tobaccoMark: CreateTobaccoMarkInput!): TobaccoMark!
  updateTobaccoMark(updatedFields: UpdateTobaccoMarkInput!, id: String!): TobaccoMark
  deleteTobaccoMark(id: String!): TobaccoMark
  createCategory(category: CreateCategoryInput!): Category!
  updateCategory(updatedFields: UpdateCategoryInput!, id: String!): Category
  deleteCategory(id: String!): Category
}

input CreateCatDto {
  name: String!
  age: Float!
  breed: String!
}

input CreateEntryInput {
  # Information on the account holder in the transaction
  accountHolder: AccountHolderInput!

  # Meta information of the entry
  meta: MetaInput!

  # Date of entry
  dateInfo: DateInput!

  #
  folioRefs: [String!]!

  #
  ledgerRefs: [String!]!
  itemEntries: [ItemEntryInput!]
  tobaccoEntry: TobaccoEntryInput
  regularEntry: RegularEntryInput

  # People referenced in this entry
  people: [PeoplePlacesInput!]!

  # Places referenced in this entry
  places: [PeoplePlacesInput!]!

  # Type of Entry
  entry: String!

  # general money information for the entry
  money: MoneyInput!
}

input AccountHolderInput {
  # Prefix of account holder's name
  prefix: String!

  # First name of account holder
  accountFirstName: String!

  # Last name of account holder
  accountLastName: String!

  # Suffix of account holder
  suffix: String!

  # Profession of account holder
  profession: String!

  # Location?
  location: String!

  # Reference?
  reference: String!

  # Debt or Credit transaction
  debitOrCredit: Float!

  # ID of the accountholder to reference in peoples master list
  accountHolderID: ID!
}

input MetaInput {
  # Ledger containing this Entry
  ledger: String!

  # Reel of the Entry
  reel: String!

  # Store Owner
  owner: String!

  # Name of Store
  store: String!

  # Year the entry was made
  year: String!

  # Folio the entry is contained in
  folioPage: String!

  # ID of entry within Folio
  entryID: String!

  # comments
  comments: String!
}

input DateInput {
  # day of date
  day: Int!

  # month of date
  month: Int!

  # year of date
  year: String!

  # complete date
  fullDate: DateTime
}

input ItemEntryInput {
  #
  perOrder: Float!

  #
  percentage: Float!

  #
  itemsOrServices: [ItemOrServiceInput]!

  #
  itemsMentioned: [MentionedItemsInput!]!
}

input ItemOrServiceInput {
  #
  quantity: Float!

  #
  qualifier: String!

  #
  variants: [String!]!

  #
  item: String!

  #
  category: String = ""

  #
  subcategory: String = ""

  #
  unitCost: PoundsShillingsPenceInput!

  #
  itemCost: PoundsShillingsPenceInput!
}

input PoundsShillingsPenceInput {
  # Number of pounds
  pounds: Float = 0

  # Number of shillings
  shilling: Float = 0

  # Number of Pence
  pence: Float = 0
}

input MentionedItemsInput {
  #
  quantity: Float!

  #
  qualifier: String!

  #
  item: String!
}

input TobaccoEntryInput {
  # words
  entry: String!

  #
  marks: [TobaccoMarkInput!]!

  #
  notes: [NoteInput!]!

  #
  money: [TobaccoMoneyInput!]!

  # words
  tobaccoShaved: Float!
}

input TobaccoMarkInput {
  # words
  markID: ID!

  #
  markName: String!
}

input NoteInput {
  #
  noteNum: Float!

  #
  totalWeight: Float!

  #
  barrelWeight: Float!

  #
  tobaccoWeight: Float!
}

input TobaccoMoneyInput {
  # words
  moneyType: String!

  # words
  tobaccoAmount: Float!

  # words
  rateForTobacco: PoundsShillingsPenceInput!

  # words
  casksInTransaction: Float!

  # words
  tobaccoSold: PoundsShillingsPenceInput!

  # words
  casksSoldForEach: PoundsShillingsPenceInput!
}

input RegularEntryInput {
  # words
  entry: String!

  #
  tobaccoMarks: [TobaccoMarkInput!]!

  #
  itemsMentioned: [MentionedItemsInput!]!
}

input PeoplePlacesInput {
  # Persons name
  name: String!

  # words
  id: ID
}

input MoneyInput {
  #
  quantity: String = ""

  #
  commodity: String!

  #
  colony: String = ""

  #
  sterling: PoundsShillingsPenceInput!

  #
  currency: PoundsShillingsPenceInput!
}

input RegisterInput {
  email: String!
  name: String!
  password: String!
  given_name: String!
  family_name: String!
}

input CreateGlossaryItemInput {
  # Name of glossary item
  name: String!

  # Filename of image in S3 bucket
  imageKey: String!

  # Description of item
  description: String!

  # Category item is in
  category: String!

  # Sub-category item is in
  subCategory: String!

  # Original price of item
  originalPrice: Float!

  # Other items related to this one
  relatedItems: [String!]!

  # Purchases related to this item
  relatedPurchases: [String!]!
}

input UpdateGlossaryItemInput {
  # Name of glossary item
  name: String

  # Filename of image in S3 bucket
  imageKey: String

  # Description of item
  description: String

  # Category item is in
  category: String

  # Sub-category item is in
  subCategory: String

  # Original price of item
  originalPrice: Float

  # Other items related to this one
  relatedItems: [String!]

  # Purchases related to this item
  relatedPurchases: [String!]
}

input CreateItemInput {
  # Name of item
  item: String!

  # Description of the item
  variants: String!
}

input UpdateItemInput {
  # Name of the item
  item: String

  # Description of the item
  variants: String
}

input CreatePlaceInput {
  # Type of item
  location: String!

  # Variations of given item
  alias: String!

  # Variations of given item
  descriptor: String!
}

input UpdatePlaceInput {
  # Type of item
  location: String

  # Variations of given item
  alias: String

  # Variations of given item
  descriptor: String
}

input CreatePersonInput {
  # Variations of given item
  account: String

  # Variations of given item
  enslaved: String

  # Variations of given item
  firstName: String

  # Variations of given item
  lastName: String

  # Variations of given item
  gender: String

  # Variations of given item
  location: String

  # Variations of given item
  prefix: String

  # Variations of given item
  profession: String

  # Variations of given item
  professionCategory: String

  # Variations of given item
  reference: String

  # Variations of given item
  store: String

  # Variations of given item
  suffix: String

  # Variations of given item
  variations: String
  professionQualifier: String
}

input UpdatePersonInput {
  # Variations of given item
  account: String

  # Variations of given item
  enslaved: String

  # Variations of given item
  firstName: String

  # Variations of given item
  lastName: String

  # Variations of given item
  gender: String

  # Variations of given item
  location: String

  # Variations of given item
  prefix: String

  # Variations of given item
  profession: String

  # Variations of given item
  professionCategory: String

  # Variations of given item
  reference: String

  # Variations of given item
  store: String

  # Variations of given item
  suffix: String

  # Variations of given item
  variations: String
  professionQualifier: String
}

input CreateTobaccoMarkInput {
  # TODO: Fill this in
  description: String!

  # TODO: Fill this in
  image: String!

  # TODO: Fill this in
  netWeight: String!

  # TODO: Fill this in
  note: String!

  # TODO: Fill this in
  notes: String!

  # TODO: Fill this in
  tobaccoMarkId: String!

  # TODO: Fill this in
  warehouse: String!

  # TODO: Fill this in
  where: String!

  # TODO: Fill this in
  whoRepresents: String!

  # TODO: Fill this in
  whoUnder: String!
}

input UpdateTobaccoMarkInput {
  # TODO: Fill this in
  description: String

  # TODO: Fill this in
  image: String

  # TODO: Fill this in
  netWeight: String

  # TODO: Fill this in
  note: String

  # TODO: Fill this in
  notes: String

  # TODO: Fill this in
  tobaccoMarkId: String

  # TODO: Fill this in
  warehouse: String

  # TODO: Fill this in
  where: String

  # TODO: Fill this in
  whoRepresents: String

  # TODO: Fill this in
  whoUnder: String
}

input CreateCategoryInput {
  # Category type
  category: String!

  # Items in the category
  item: String!

  # Subcategory?
  subcategory: String!
}

input UpdateCategoryInput {
  # Category type
  category: String!

  # Items in the category
  item: String!

  # Subcategory?
  subcategory: String!
}
